CREATE TABLE student (
    student_id INT PRIMARY KEY,
    student_name VARCHAR(20),
    major VARCHAR(20)

);
DESCRIBE student;

DROP TABLE student;

ALTER TABLE student ADD gpa DECIMAL(3,2);

INSERT INTO student(student_id,student_name) VALUES(3, 'sheetal');

SELECT * FROM student;

UPDATE student SET major='Machine Laerning' WHERE major='ML';

-----------------------CREATING COMPANY DATABASE ---------------------------------------------------------------------------

CREATE TABLE employee (
  emp_id INT PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(40),
  birth_day DATE,
  sex VARCHAR(1),
  salary INT,
  super_id INT,
  branch_id INT
);

CREATE TABLE branch (
  branch_id INT PRIMARY KEY,
  branch_name VARCHAR(40),
  mgr_id INT,    --defining the mgr_id name first 
  mgr_start_date DATE,
  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);

---- Adding branch_id and super id as FOREIGN Key since earlier branch table was not created.
ALTER TABLE employee ADD FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL;

ALTER TABLE employee ADD FOREIGN KEY(super_id) REFERENCES employee(emp_id) ON DELETE SET NULL;

CREATE TABLE client (
  client_id INT PRIMARY KEY,
  client_name VARCHAR(40),
  branch_id INT,
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL
);

CREATE TABLE works_with (
  emp_id INT,
  client_id INT,
  total_sales INT,
  PRIMARY KEY(emp_id, client_id),  
  FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
  FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

CREATE TABLE branch_supplier (
  branch_id INT,
  supplier_name VARCHAR(40),
  supply_type VARCHAR(40),
  PRIMARY KEY(branch_id, supplier_name),
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);


-- -----------------------INSERTING DATA ------------------------------------------------------

-- Corporate
INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);

INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');

UPDATE employee SET branch_id = 1 WHERE emp_id = 100;

INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);

-- Scranton
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);

INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee SET branch_id = 2 WHERE emp_id = 102;

INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);

-- Stamford
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employee SET branch_id = 3 WHERE emp_id = 106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);


-- BRANCH SUPPLIER
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

-- CLIENT
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

-- WORKS_WITH
INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);

---------------MORE BASIC QUERIES-----------------------------------------------------
SELECT * FROM employee;
SELECT * FROM branch;
SELECT * FROM works_with;
SELECT * FROM client;
SELECT * FROM branch_supplier;

SELECT * FROM employee ORDER BY salary DESC;
SELECT * FROM employee ORDER BY sex, first_name, last_name;
SELECT * FROM employee LIMIT 5;
SELECT first_name, last_name FROM employee;
SELECT first_name AS forename, last_name AS surname FROM employee;
SELECT DISTINCT sex FROM employee;

------------FUNCTIONS--------------------------------------------------------------------
--FIND NUMBER OF EMPLOYEES
SELECT COUNT(emp_id) FROM employee;
SELECT COUNT(super_id) FROM employee;

---Find the number of female employees born after 1970
SELECT COUNT(emp_id) FROM employee WHERE sex='F' AND birth_day> '1970-01-01';

---------FIND the average of all the employee's salary
SELECT AVG(salary) FROM employee;
---------FIND the average of all the male employee's salary
SELECT AVG(salary) FROM employee WHERE sex='M';

----FIND sum of all employee's salary
SELECT SUM(salary) FROM employee;

----FIND out how many males and females are 
SELECT COUNT(sex),sex FROM employee GROUP BY sex;

--------FIND total sales f each employee
SELECT SUM(total_sales ),emp_id FROM works_with GROUP BY emp_id;

--------wildcards---------------------------------------------------------
--% = any NUMBER charcters, _ =one character

--Find any client's who are on LLC 
---%LLC . any number of characters can come before LLC .. end with LLC
SELECT * FROM client WHERE client_name LIKE '%LLC';

--FIND any branch suppliers tht are in label business
--%label% anywhere in name
SELECT * FROM branch_supplier WHERE  supplier_name LIKE '%label%';

--Find all employees are born in OCTOBER
--____=YYYY we know there are 4 charcters_
SELECT * FROM employee WHERE birth_day LIKE '____-10%';

--FIND any clients whoa are schools
SELECT * FROM client WHERE client_name LIKE '%school%';


--Unions------------------------------------------------------------------------
---FIND a lits of employee and branch names
SELECT first_name AS Company_name FROM employee
UNION 
SELECT branch_name FROM branch
UNION 
SELECT client_name FROM client;

--RULES FOR UNION
--1 Same number of columns getting in each SELECT statement 
--2 Similar datatype should be there of both columns
--3 Name of the column in output will be as the First SELECT query column , 
-- you can change that although.
--client.branch_id  is more readable , just for no confusion

----FIND a list of all clients and branch suppliers names
SELECT client_name, client.branch_id FROM client
UNION
SELECT supplier_name, branch_supplier.branch_id FROM branch_supplier;

--Joins :combines rows from two or tables ----------------------------------------------------------------------
INSERT INTO branch VALUES(4, 'buffalo', NULL, NULL);
SELECT * FROM branch;

-- Find all branches and the names of the their names
--INNER JOIN shared column --where only there is a match
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
JOIN branch
ON employee.emp_id= branch.mgr_id;

---LEFT JOIN-- all employees got include
--employee table is the LEFT table here, all of its stuff gets in the otput as from employee hai,,
--and give svalue where it is matching, other wise NULL.

SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
LEFT JOIN branch
ON employee.emp_id= branch.mgr_id;

--RIGHT Join-- all of the rows from branch table gets in output
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
RIGHT JOIN branch
ON employee.emp_id= branch.mgr_id;

--full outer join--left+right--- not in mysql 

--NESTED QUERIES----------------------------------------------------
--FIND names of all employees who have sold over 30,000 to a single client
-- but employee names not there in works_with table, but have emp_id .. so we will get names from employee table
SELECT employee.first_name, employee.last_name FROM employee WHERE employee.emp_id
IN (
    SELECT works_with.emp_id FROM works_with WHERE total_sales> 30000
);

--FIND all clients who are handled by the branch that Michael SCott manages , ASSUME you know Michael's ID 
SELECT client.client_name FROM client WHERE client.branch_id =(
    SELECT branch.branch_id FROM branch WHERE branch.mgr_id=102 LIMIT 1
);

----------triggers--------------------------------------------------------------

CREATE TABLE trigger_test (
     message VARCHAR(100)
);
-----------RUN IN COMMAND LINE, IT WONT WORK IN EDITOR
DELIMITER $$
CREATE
    TRIGGER my_trigger1 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES('added new employee');
    END$$
DELIMITER ;
INSERT INTO employee
VALUES(109, 'Oscar', 'Martinez', '1968-02-19', 'M', 69000, 106, 3);

------------------------------------
DELIMITER $$
CREATE
    TRIGGER my_trigger2 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES(NEW.first_name);
    END$$
DELIMITER ;
INSERT INTO employee
VALUES(110, 'Kevin', 'Malone', '1978-02-19', 'M', 69000, 106, 3);
-------------------------------------
DELIMITER $$
CREATE
    TRIGGER my_trigger3 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
         IF NEW.sex = 'M' THEN
               INSERT INTO trigger_test VALUES('added male employee');
         ELSEIF NEW.sex = 'F' THEN
               INSERT INTO trigger_test VALUES('added female');
         ELSE
               INSERT INTO trigger_test VALUES('added other employee');
         END IF;
    END$$
DELIMITER ;
INSERT INTO employee
VALUES(111, 'Pam', 'Beesly', '1988-02-19', 'F', 69000, 106, 3);


DROP TRIGGER my_trigger1;
-------------------------------------------------
